load("francais.Rdata")
}
v=c()
texte_crypte=input$texte_a_decrypter
texte_crypte=str_to_lower(texte_crypte)
texte_crypte_initial=texte_crypte
frequences_lettres_cryptees=frequencelettres(texte_crypte,extraction_alphabets_du_texte)
texte_crypte=textecrypte2(texte_crypte,frequences_lettres,frequences_lettres_cryptees)
best=list("",0)
n_iterations_metropolis=input$n_iterations_metropolis
for(l in 1:n_iterations_metropolis){
texte_voisin=choix_texte_voisin(texte_crypte,frequences_lettres,alphabets,proba,matrice_apprentissage,textevoisin,textevoisin2)
texte_crypte=Q(texte_voisin,texte_crypte,proba,matrice_apprentissage,frequences_lettres)
p=proba(texte_crypte,matrice_apprentissage)
if(p>best[[2]]){best=list(texte_crypte,p)}
if(l%%1000==0){
cat("n = ",l,"\n\n")
cat("Courant  : ",p,"\n",texte_crypte,"\n\n")
cat("meilleur : ",best[[2]],"\n",best[[1]],"\n","\n\n\n")
v=c(v,texte_crypte)
}
}
return(best[[1]])
}) #end decryptage_reactive
output$texte_courant <- renderPrint(decryptage_reactive())
output$texte_crypte <- renderText({
cryptage_reactive()
})
output$texte_decrypte <- renderText({
decryptage_reactive()[length(decryptage_reactive())]
})
output$clip <- renderUI({
rclipButton("clipbtn", "Copier", cryptage_reactive(), icon("clipboard"))
})
} #end server
# Run the application
shinyApp(ui = ui, server = server,   options = list(width= 950, height = 800))
library(stringr)
library(shiny)
library(rclipboard)
nom_fichier_texte_apprentissage="corpus_francais.txt"
texte_apprentissage = lecture_texte_apprentissage(nom_fichier_texte_apprentissage)
lecture_texte_apprentissage <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage,encoding="UTF-8"))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
texte_apprentissage <- gsub(" ,","", texte_apprentissage)
texte_apprentissage <- gsub("\n","", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
texte=str_to_lower(texte)
alphabets_crypte = sample(alphabets)
texte_crypte = ""
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
for(s in 1:length(probabilites)){
if(probabilites[s]==0){probabilites[s]=10**(-6)}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
proba=function(texte,matrice_apprentissage){
texte=str_to_lower(texte)
n=str_length(texte)
p=1
k=4.055*log(n)
for(i in 1:(n-1)){
p=p*matrice_apprentissage[str_sub(texte,i,i),str_sub(texte,i+1,i+1)]*k
}
p
}
##permutation_alphabet = function(alphabets)
textevoisin=function(texte,frequences_lettres){
lettres_ordonnees=names(frequences_lettres)
alphabet_du_texte=extraction_alphabets_du_texte(texte)
indice1=sample(length(alphabet_du_texte),size=1)
indice2=sample(1:length(lettres_ordonnees),size=1,prob=frequences_lettres/sum(frequences_lettres))
paire_indice=c(indice1,indice2)
paire_indice
texte_voisin=''
for(i in 1:str_length(texte)){
if(str_sub(texte,i,i)==alphabet_du_texte[paire_indice[1]]){
texte_voisin=str_c(texte_voisin,toString(lettres_ordonnees[paire_indice[2]]))
}
else if(str_sub(texte,i,i)==lettres_ordonnees[paire_indice[2]]){
texte_voisin=str_c(texte_voisin,alphabet_du_texte[paire_indice[1]])
}
else{
texte_voisin=str_c(texte_voisin,str_sub(texte,i,i))
}
}
return(texte_voisin)
}
textevoisin2=function(texte,alphabets){
paire_indice=sample(length(alphabets),size=2)
texte_voisin=''
for(i in 1:str_length(texte)){
if(str_sub(texte,i,i)==alphabets[paire_indice[1]]){
texte_voisin=str_c(texte_voisin,alphabets[paire_indice[2]])
}
else if(str_sub(texte,i,i)==alphabets[paire_indice[2]]){
texte_voisin=str_c(texte_voisin,alphabets[paire_indice[1]])
}
else{
texte_voisin=str_c(texte_voisin,str_sub(texte,i,i))
}
}
return(texte_voisin)
}
Q=function(texte_voisin,texte_crypte,proba,matrice_apprentissage,frequences_lettres){
probanew=proba(texte_voisin,matrice_apprentissage)
probaold=proba(texte_crypte,matrice_apprentissage)
if (probanew-probaold >= 0) { return(texte_voisin) }
else if (runif(1) <= probanew/probaold) { return(texte_voisin) }
else { return(texte_crypte) }
}
frequencelettres=function(texte,extraction_alphabets_du_texte){
alphabets=extraction_alphabets_du_texte(texte)
frequence_lettres=c(numeric(length(alphabets)))
n=str_length(texte)
for(i in 1:n){
if(i%%10000==0){print(paste(i,"/",n))}
for(j in 1:length(alphabets)){
if(str_sub(texte,i,i)==alphabets[j]){frequence_lettres[j]=frequence_lettres[j]+1}
}
}
names(frequence_lettres) = alphabets
frequence_lettres=sort(frequence_lettres,decreasing = TRUE)
}
textecrypte2=function(texte_crypte, frequence_lettres,frequence_lettres_cryptees){
lettres_cryptees_ordonnees=names(frequence_lettres_cryptees)
lettres_ordonnees=names(frequence_lettres)
texte_crypte2 = ''
for(i in 1:str_length(texte_crypte)){
for(j in 1:length(lettres_cryptees_ordonnees)){
if(str_sub(texte_crypte,i,i)==lettres_cryptees_ordonnees[j]){
texte_crypte2=str_c(texte_crypte2,lettres_ordonnees[j])
}
}
}
return(toString(texte_crypte2))
}
choix_texte_voisin=function(texte_crypte,frequences_lettres,alphabets,proba,matrice_apprentissage,textevoisin,textevoisin2){
if (proba(texte_crypte,matrice_apprentissage)!=0){
return(textevoisin2(texte_crypte,alphabets))
}
else if(proba(texte_crypte,matrice_apprentissage)==0){
return(textevoisin(texte_crypte,frequences_lettres))
}
else(print("erreur in choix_texte_voisin"))
}
texte_apprentissage = lecture_texte_apprentissage(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
nom_fichier_texte_apprentissage="corpus_francais_corrigé.txt"
texte_apprentissage = lecture_texte_apprentissage(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
frequences_lettres=frequencelettres(texte_apprentissage,extraction_alphabets_du_texte)
lettres_ordonnees=names(frequences_lettres)
lettres_ordonnees = traitement_des_caracteres_speciaux(lettres_ordonnees)
save(matrice_apprentissage,alphabets)
save(matrice_apprentissage,alphabets,frequences_lettres,lettres_ordonnees,file="francais.Rdata")
knitr::opts_chunk$set(echo = TRUE)
### Réinitialisation de l'environnement ###
rm(list=ls())
### Librairies ###
library(stringr)
library(shiny)
library(rclipboard)
load("environnement.RData")
ui <- fluidPage(
rclipboardSetup(),
h3("Cryptage"),
inputPanel(
fileInput("file", "Choose a file", multiple = FALSE, accept = NULL,
width = NULL, buttonLabel = "Browse...",
placeholder = "No file selected")
),
inputPanel(
textAreaInput("texte_a_crypter", "Texte à crypter","We are accounted poor citizens, the patricians good. What authority surfeits on would relieve us: if they would yield us but the superfluity, while it were wholesome, we might guess they relieved us humanely; but they think we are too dear: the leanness that afflicts us, the object of our misery, is as an inventory to particularise their abundance; our sufferance is a gain to them Let us revenge this with our pikes, ere we become rakes: for the gods know I speak this in hunger for bread, not in thirst for revenge.",width = 885, height = 200)
),
inputPanel(
actionButton("go_cryptage", "Crypter !"),
uiOutput("clip")
),
tabsetPanel(type = "tabs",
tabPanel("texte crypté", div(div(textOutput("texte_crypte"), class="form-control shiny-bound-input", style="width: 885px; height: 200px; color: grey"), class="shiny-input-panel"))
),
h3("Decryptage"),
inputPanel(
textAreaInput("texte_a_decrypter", "Texte à decrypter","-xy!rxy!zzmaicx3ybmmryzfcfwxiekyc?xyb!crfzf!iey:mm3$y-?!cy!ac?mrfc&year;xfceymiy-mas3yrxsfx'xyaeuyf;yc?x&y-mas3y&fxs3yaeyoacyc?xyeabxr;safc&ky-?fsxyfcy-xrxy-?msxem xky-xy f:?cy:axeeyc?x&yrxsfx'x3yaey?a !ixs&gyoacyc?x&yc?fihy-xy!rxycmmy3x!ruyc?xysx!iixeeyc?!cy!;;sfzceyaekyc?xymodxzcym;ymary fexr&kyfey!ey!iyfi'xicmr&ycmyb!rcfzas!rfexyc?xfry!oai3!izxgymaryea;;xr!izxyfey!y:!fiycmyc?x ysxcyaeyrx'xi:xyc?fey-fc?ymarybfhxekyxrxy-xyoxzm xyr!hxeuy;mryc?xy:m3eyhim-yfyebx!hyc?feyfiy?ai:xry;mryorx!3kyimcyfiyc?frecy;mryrx'xi:x$",width = 885, height = 200)),
inputPanel(
sliderInput("n_iterations_metropolis", "Nombre d'iterations metropolis", min=10, max=80000, value=500, step= 500),
actionButton("go_decryptage", "Dérypter !"),
radioButtons("language", h3("Language"),
choices = list("Anglais" = 1, "Français" = 2),
selected = 1)
),
tabsetPanel(type = "tabs",
tabPanel("texte decrypté", div(div(textOutput("texte_decrypte"), class="form-control shiny-bound-input", style="width: 885px; height: 200px; color: grey"), class="shiny-input-panel"))
),
h3("Historique des itérations"),
tabsetPanel(type = "tabs",
tabPanel("Historique", verbatimTextOutput("texte_courant",placeholder = TRUE))
)
)
server <- function(input, output) {
eventReactive(input$file, {
var = input$file
cat(var)
})
lecture_texte_apprentissage <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage,encoding="UTF-8"))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
texte_apprentissage <- gsub(" ,","", texte_apprentissage)
texte_apprentissage <- gsub("\n","", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
texte=str_to_lower(texte)
alphabets_crypte = sample(alphabets)
texte_crypte = ""
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
for(s in 1:length(probabilites)){
if(probabilites[s]==0){probabilites[s]=10**(-6)}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
proba=function(texte,matrice_apprentissage){
texte=str_to_lower(texte)
n=str_length(texte)
p=1
k=4.055*log(n)
for(i in 1:(n-1)){
p=p*matrice_apprentissage[str_sub(texte,i,i),str_sub(texte,i+1,i+1)]*k
}
p
}
##permutation_alphabet = function(alphabets)
textevoisin=function(texte,frequences_lettres){
lettres_ordonnees=names(frequences_lettres)
alphabet_du_texte=extraction_alphabets_du_texte(texte)
indice1=sample(length(alphabet_du_texte),size=1)
indice2=sample(1:length(lettres_ordonnees),size=1,prob=frequences_lettres/sum(frequences_lettres))
paire_indice=c(indice1,indice2)
paire_indice
texte_voisin=''
for(i in 1:str_length(texte)){
if(str_sub(texte,i,i)==alphabet_du_texte[paire_indice[1]]){
texte_voisin=str_c(texte_voisin,toString(lettres_ordonnees[paire_indice[2]]))
}
else if(str_sub(texte,i,i)==lettres_ordonnees[paire_indice[2]]){
texte_voisin=str_c(texte_voisin,alphabet_du_texte[paire_indice[1]])
}
else{
texte_voisin=str_c(texte_voisin,str_sub(texte,i,i))
}
}
return(texte_voisin)
}
textevoisin2=function(texte,alphabets){
paire_indice=sample(length(alphabets),size=2)
texte_voisin=''
for(i in 1:str_length(texte)){
if(str_sub(texte,i,i)==alphabets[paire_indice[1]]){
texte_voisin=str_c(texte_voisin,alphabets[paire_indice[2]])
}
else if(str_sub(texte,i,i)==alphabets[paire_indice[2]]){
texte_voisin=str_c(texte_voisin,alphabets[paire_indice[1]])
}
else{
texte_voisin=str_c(texte_voisin,str_sub(texte,i,i))
}
}
return(texte_voisin)
}
Q=function(texte_voisin,texte_crypte,proba,matrice_apprentissage,frequences_lettres){
probanew=proba(texte_voisin,matrice_apprentissage)
probaold=proba(texte_crypte,matrice_apprentissage)
if (probanew-probaold >= 0) { return(texte_voisin) }
else if (runif(1) <= probanew/probaold) { return(texte_voisin) }
else { return(texte_crypte) }
}
frequencelettres=function(texte,extraction_alphabets_du_texte){
alphabets=extraction_alphabets_du_texte(texte)
frequence_lettres=c(numeric(length(alphabets)))
n=str_length(texte)
for(i in 1:n){
if(i%%10000==0){print(paste(i,"/",n))}
for(j in 1:length(alphabets)){
if(str_sub(texte,i,i)==alphabets[j]){frequence_lettres[j]=frequence_lettres[j]+1}
}
}
names(frequence_lettres) = alphabets
frequence_lettres=sort(frequence_lettres,decreasing = TRUE)
}
textecrypte2=function(texte_crypte, frequence_lettres,frequence_lettres_cryptees){
lettres_cryptees_ordonnees=names(frequence_lettres_cryptees)
lettres_ordonnees=names(frequence_lettres)
texte_crypte2 = ''
for(i in 1:str_length(texte_crypte)){
for(j in 1:length(lettres_cryptees_ordonnees)){
if(str_sub(texte_crypte,i,i)==lettres_cryptees_ordonnees[j]){
texte_crypte2=str_c(texte_crypte2,lettres_ordonnees[j])
}
}
}
return(toString(texte_crypte2))
}
choix_texte_voisin=function(texte_crypte,frequences_lettres,alphabets,proba,matrice_apprentissage,textevoisin,textevoisin2){
if (proba(texte_crypte,matrice_apprentissage)!=0){
return(textevoisin2(texte_crypte,alphabets))
}
else if(proba(texte_crypte,matrice_apprentissage)==0){
return(textevoisin(texte_crypte,frequences_lettres))
}
else(print("erreur in choix_texte_voisin"))
}
##apprentissage
if(FALSE){
texte_apprentissage = lecture_texte_apprentissage(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
frequences_lettres=frequencelettres(texte_apprentissage,extraction_alphabets_du_texte)
lettres_ordonnees=names(frequences_lettres)
lettres_ordonnees = traitement_des_caracteres_speciaux(lettres_ordonnees)
#for(i in (length(lettres_ordonnees)-k):length(lettres_ordonnees)){
#  texte_apprentissage <- gsub(lettres_ordonnees[i],"", texte_apprentissage)
#}
#alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
#frequences_lettres=frequencelettres(texte_apprentissage,extraction_alphabets_du_texte)
}
##Execution
cryptage_reactive=eventReactive(c(input$go_cryptage),{
texte=input$texte_a_crypter
texte=str_to_lower(texte)
texte_crypte = cryptage(texte,alphabets)
texte_crypte
})
decryptage_reactive=eventReactive(c(input$go_decryptage),{
langue=input$language
if(langue==1){
load("anglais.Rdata")
}
else if (langue==2){
load("francais.Rdata")
}
v=c()
texte_crypte=input$texte_a_decrypter
texte_crypte=str_to_lower(texte_crypte)
texte_crypte_initial=texte_crypte
frequences_lettres_cryptees=frequencelettres(texte_crypte,extraction_alphabets_du_texte)
texte_crypte=textecrypte2(texte_crypte,frequences_lettres,frequences_lettres_cryptees)
best=list("",0)
n_iterations_metropolis=input$n_iterations_metropolis
for(l in 1:n_iterations_metropolis){
texte_voisin=choix_texte_voisin(texte_crypte,frequences_lettres,alphabets,proba,matrice_apprentissage,textevoisin,textevoisin2)
texte_crypte=Q(texte_voisin,texte_crypte,proba,matrice_apprentissage,frequences_lettres)
p=proba(texte_crypte,matrice_apprentissage)
if(p>best[[2]]){best=list(texte_crypte,p)}
if(l%%1000==0){
cat("n = ",l,"\n\n")
cat("Courant  : ",p,"\n",texte_crypte,"\n\n")
cat("meilleur : ",best[[2]],"\n",best[[1]],"\n","\n\n\n")
v=c(v,texte_crypte)
}
}
return(best[[1]])
}) #end decryptage_reactive
output$texte_courant <- renderPrint(decryptage_reactive())
output$texte_crypte <- renderText({
cryptage_reactive()
})
output$texte_decrypte <- renderText({
decryptage_reactive()[length(decryptage_reactive())]
})
output$clip <- renderUI({
rclipButton("clipbtn", "Copier", cryptage_reactive(), icon("clipboard"))
})
} #end server
# Run the application
shinyApp(ui = ui, server = server,   options = list(width= 950, height = 800))
load("francais.Rdata")
v=c()
texte_crypte="je tu ils nous vous ils pour avec mais ce te ne et "
texte_crypte=str_to_lower(texte_crypte)
texte_crypte_initial=texte_crypte
frequences_lettres_cryptees=frequencelettres(texte_crypte,extraction_alphabets_du_texte)
texte_crypte=textecrypte2(texte_crypte,frequences_lettres,frequences_lettres_cryptees)
best=list("",0)
n_iterations_metropolis=input$n_iterations_metropolis
n_iterations_metropolis=2000
texte_voisin=choix_texte_voisin(texte_crypte,frequences_lettres,alphabets,proba,matrice_apprentissage,textevoisin,textevoisin2)
texte_crypte=Q(texte_voisin,texte_crypte,proba,matrice_apprentissage,frequences_lettres)
p=proba(texte_crypte,matrice_apprentissage)
if(p>best[[2]]){best=list(texte_crypte,p)}
if(l%%1000==0){
cat("n = ",l,"\n\n")
cat("Courant  : ",p,"\n",texte_crypte,"\n\n")
cat("meilleur : ",best[[2]],"\n",best[[1]],"\n","\n\n\n")
v=c(v,texte_crypte)
}
for(l in 1:n_iterations_metropolis){
texte_voisin=choix_texte_voisin(texte_crypte,frequences_lettres,alphabets,proba,matrice_apprentissage,textevoisin,textevoisin2)
texte_crypte=Q(texte_voisin,texte_crypte,proba,matrice_apprentissage,frequences_lettres)
p=proba(texte_crypte,matrice_apprentissage)
if(p>best[[2]]){best=list(texte_crypte,p)}
if(l%%1000==0){
cat("n = ",l,"\n\n")
cat("Courant  : ",p,"\n",texte_crypte,"\n\n")
cat("meilleur : ",best[[2]],"\n",best[[1]],"\n","\n\n\n")
v=c(v,texte_crypte)
}
}
alphabets
setwd("~/Documents/decryptage backup/decryptage")
load("~/Documents/decryptage backup/decryptage/francais.RData")
save(matrice_apprentissage,alphabets,frequences_lettres,lettres_ordonnees,file="français.Rdata")
save(matrice_apprentissage,alphabets,frequences_lettres,lettres_ordonnees,file="français.RData")
load("francais.RData")
save(matrice_apprentissage,alphabets,frequences_lettres,lettres_ordonnees,file="français2.RData")
setwd("~/Documents/decryptage backup/decryptage")
setwd("~/Documents/decryptage backup/decryptage")
load("anglais.RData")
load("francais2.RData")
load("~/Documents/decryptage backup/decryptage/français.Rdata")
load("~/Documents/decryptage backup/decryptage/anglais.RData")
View(matrice_apprentissage)
load("~/Documents/decryptage backup/decryptage/francais.Rdata")
