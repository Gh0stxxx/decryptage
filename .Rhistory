} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte_apprentissage(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
### Librairies ###
library(stringr)
### Paramètres ###
nom_fichier_texte_apprentissage = 'wonderland.txt'
### Fonctions ###
lecture_texte <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
rm(list=ls())
### Librairies ###
library(stringr)
### Paramètres ###
nom_fichier_texte_apprentissage = 'wonderland.txt'
### Fonctions ###
lecture_texte <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
rm(list=ls())
### Librairies ###
library(stringr)
### Paramètres ###
nom_fichier_texte_apprentissage = 'wonderland.txt'
### Fonctions ###
lecture_texte <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
rm(list=ls())
rm(list=ls())
### Librairies ###
library(stringr)
### Paramètres ###
nom_fichier_texte_apprentissage = 'wonderland.txt'
### Fonctions ###
lecture_texte <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
rm(list=ls())
### Librairies ###
library(stringr)
### Paramètres ###
nom_fichier_texte_apprentissage = 'wonderland.txt'
### Fonctions ###
lecture_texte <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
i = 1
str_sub(texte_apprentissage,i,i)
i = 2
str_sub(texte_apprentissage,i,i)
i = 3
str_sub(texte_apprentissage,i,i)
i = 4
str_sub(texte_apprentissage,i,i)
i = 5
str_sub(texte_apprentissage,i,i)
i = 6
str_sub(texte_apprentissage,i,i)
i = 7
str_sub(texte_apprentissage,i,i)
i = 8
str_sub(texte_apprentissage,i,i)
i = 9
str_sub(texte_apprentissage,i,i)
alphabets
str_extract_all(texte_apprentissage,str_c(" ",'.')
)
rm(list=ls())
### Librairies ###
library(stringr)
### Paramètres ###
nom_fichier_texte_apprentissage = 'wonderland.txt'
### Fonctions ###
lecture_texte_apprentissage <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte_apprentissage(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
### Réinitialisation de l'environnement ###
rm(list=ls())
### Réinitialisation de l'environnement ###
rm(list=ls())
### Librairies ###
library(stringr)
### Paramètres ###
nom_fichier_texte_apprentissage = 'wonderland.txt'
### Fonctions ###
lecture_texte_apprentissage <- function(nom_fichier_texte_apprentissage) {
texte_apprentissage <- toString(readLines(nom_fichier_texte_apprentissage))
texte_apprentissage <- str_to_lower(texte_apprentissage)
texte_apprentissage <- gsub("\\s{2,}"," ", texte_apprentissage)
return(texte_apprentissage)
}
extraction_alphabets_du_texte <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
traitement_des_caracteres_speciaux <- function(alphabets) {
alphabets_avec_speciaux = c()
for (alphabet in alphabets) {
if ( str_detect( alphabet , "[\\+\\*\\?\\^\\$\\.\\[\\]\\{\\}\\(\\)\\|\\/]" ) ) {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, str_c("\\",alphabet))
} else {
alphabets_avec_speciaux = c(alphabets_avec_speciaux, alphabet)
}
}
return(alphabets_avec_speciaux)
}
cryptage <- function(texte,alphabets) {
alphabets_crypte = sample(alphabets)
texte_crypte = c()
for( i in 1:(str_length(texte)) ) {
lettre_texte = str_sub(texte,i,i)
texte_crypte = str_c( texte_crypte , alphabets[ which( lettre_texte == alphabets_crypte) ] )
}
return(texte_crypte)
}
calcule_probabilite_matrice_apprentissage <- function(texte, alphabets) {
probabilites = c()
matrice_col_row_names = alphabets
alphabets = traitement_des_caracteres_speciaux(alphabets)
for (i in 1: length(alphabets) ) {
premiere_lettre = alphabets[i]
occurences_premier_lettre = as.vector(str_extract_all(texte,str_c(premiere_lettre,'.'))[[1]])
for (j in 1: length(alphabets) ) {
seconde_lettre = alphabets[j]
premiere_et_seconde_lettre = str_c(premiere_lettre,seconde_lettre)
nombre_occurences_premiere_et_seconde_lettre = sum(occurences_premier_lettre == premiere_et_seconde_lettre)
probabilite_premiere_et_seconde_lettre = nombre_occurences_premiere_et_seconde_lettre/length(occurences_premier_lettre)
probabilites = c(probabilites, probabilite_premiere_et_seconde_lettre)
}
}
matrice_apprentissage = matrix( probabilites, nrow = length(alphabets), byrow = TRUE, dimnames = list(matrice_col_row_names, matrice_col_row_names) )
return(matrice_apprentissage)
}
### Exécution ###
texte_apprentissage = lecture_texte_apprentissage(nom_fichier_texte_apprentissage)
alphabets = extraction_alphabets_du_texte(texte_apprentissage)
#texte_crypte = cryptage(texte_apprentissage,alphabets)
matrice_apprentissage = calcule_probabilite_matrice_apprentissage(texte_apprentissage,alphabets)
texte_crypte = cryptage(texte_apprentissage,alphabets)
?sample
