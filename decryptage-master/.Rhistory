}
extraction_alphabets <- function(texte) {
alphabets = c()
for (i in 1:str_length(texte) ){
alphabet = str_sub(texte,i,i)
if (!alphabet %in% alphabets)
alphabets = c(alphabets,alphabet)
}
return(alphabets)
}
lecture_corpus(nom_fichier_corpus)
lecture_corpus <- function(nom_fichier) {
corpus <- toString(readLines(nom_fichier))
corpus <- str_to_lower(corpus)
corpus <- gsub("\\s{2,}"," ", corpus) #Supression des espaces non nécessaires
corpus <- gsub(" ,","", corpus) #Supression des virgules non nécessaires
return(corpus)
}
lecture_corpus(nom_fichier_corpus)
calcule_frequence_bigrames <- function(texte, alphabets) {
frequence_bigrames = c()
for (i in 1: length(alphabets) ) {
lettre_precedente = alphabets[i]
occurences_lettre_precedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'))[[1]]
for (j in 1: length(alphabets) ) {
lettre_suivante = alphabets[j]
bigrame = str_c(lettre_precedente,lettre_suivante)
cardinal_bigrame = sum(occurences_lettre_precedente == bigrame)
frequence_bigrame = cardinal_bigrame/length(occurences_lettre_precedente)
frequence_bigrames = c(frequence_bigrames, frequence_bigrame)
}
}
matrice_bigrames = matrix(frequence_bigrames, nrow = length(alphabets), byrow = TRUE, dimnames = list(alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_bigrames))[2]*1e-3
matrice_bigrames[matrice_bigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_bigrames) ) {
matrice_bigrames[numero_ligne,] = matrice_bigrames[numero_ligne,] / sum(matrice_bigrames[numero_ligne,])
}
return(matrice_bigrames)
}
?array
matrice_trigrames = array(1e-10, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , byrow = TRUE, dimnames = list(alphabets, alphabets,alphabets ))
matrice_trigrames = array(1e-10, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets,alphabets ))
nrow(matrice_trigrames)
ncol(matrice_trigrames)
matrice_trigrames[3,2,]
matrice_trigrames[3,2,1]
sum(matrice_trigrames[3,4,])
remplissage_valeur_trigrames <- function(data) {
alphabets = extraction_alphabets_du_texte(paste(data[[1]], collapse = ''))
matrice_trigrames = array(1e-10, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets,alphabets ))
for (compteur in 1:length(data[[1]]) ) {
lettre_anteprecedent = strsplit(data[compteur,1], NULL)[[1]][1]
lettre_precedente = strsplit(data[compteur,1], NULL)[[1]][2]
lettre_suivante = strsplit(data[compteur,1], NULL)[[1]][3]
matrice_trigrames[lettre_anteprecedent,lettre_precedente,lettre_suivante] = data[compteur,2]
}
for (numero_ligne in 1:nrow(matrice_trigrames) ) {
for (numero_colonne in 1:ncol(matrice_trigrames) ) {
matrice_trigrames[numero_ligne,numero_colonne,] = matrice_trigrames[numero_ligne,numero_colonne,] / sum(matrice_trigrames[numero_ligne,numero_colonne,])
}
}
return(matrice_trigrames)
}
data = read.table("EN-Lettertriplets.txt", header = FALSE, sep = '\t', stringsAsFactors = FALSE, na.strings = "", fill = TRUE, skip = 1)[,c(8,2)]
data = data[grepl("([A-Z]|\\s){2,}",data[,1], perl= TRUE),]
names(data) = c("syllabe","valeur")
row.names(data) <- NULL
View(data)
mmm = remplissage_valeur_trigrames(data)
View(mm)
mmm[1,1,1]
mmm[1,1]
mmm[1,1,1]
sum(mm[1,1,])
sum(mm[1,1,])
sum(mm[1,1,:])
sum(mm[1,1,])
mm[1,1,]
mm[1,1,1]
sum(mmm[1,1,])
sum(mmm[1,2,])
sum(mmm[4,2,])
sum(c("hjk","jhj","hjk","uio") == "hjk")
?matrix
unique(sort(mmm))
[mmm == 0]
mmm[mmm == 0]
mmm[mmm == 1.250188e-05]
mmm[mmm < 1.250188e-05]
calcule_frequence_trigrames <- function(texte, alphabets) {
frequence_trigrames = c()
for (compteur_anteprecendent in 1: length(alphabets) ) {
lettre_anteprecedente = alphabets[compteur_anteprecendent]
occurences_lettre_anteprecedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_anteprecedente),'..'))[[1]]
for (compteur_precedent in 1: length(alphabets) ) {
lettre_precedente = alphabets[compteur_precedent]
occurences_lettre_precedente = str_extract_all(occurences_lettre_anteprecedente,str_c(traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'))[[1]]
for (compteur_suivant in 1:length(alphabets)) {
lettre_suivante = alphabets[compteur_suivant]
trigrame = str_c(lettre_anteprecedente,lettre_precedente, lettre_suivante)
cardinal_trigrame = sum(occurences_lettre_precedente == trigrame)
frequence_trigrame = ccardinal_trigrame/length(occurences_lettre_precedente)
frequence_trigrames = c(frequence_trigrames, frequence_trigrame)
}
}
}
matrice_trigrames = array(frequence_trigrames, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_trigrames))[2]*1e-3
matrice_trigrames[matrice_trigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_trigrames) ) {
for (numero_colonne in 1:ncol(matrice_trigrames) ) {
matrice_trigrames[numero_ligne,numero_colonne,] = matrice_trigrames[numero_ligne,numero_colonne,] / sum(matrice_trigrames[numero_ligne,numero_colonne,])
}
}
return(matrice_trigrames)
}
calcule_frequence_trigrames(texte_apprentissage,alphabets)
calcule_frequence_bigrames <- function(texte, alphabets) {
frequence_bigrames = c()
for (i in 1: length(alphabets) ) {
lettre_precedente = alphabets[i]
occurences_lettre_precedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'))[[1]]
for (j in 1: length(alphabets) ) {
lettre_suivante = alphabets[j]
bigrame = str_c(lettre_precedente,lettre_suivante)
cardinal_bigrame = sum(occurences_lettre_precedente == bigrame)
frequence_bigrame = cardinal_bigrame/length(occurences_lettre_precedente)
frequence_bigrames = c(frequence_bigrames, frequence_bigrame)
}
}
matrice_bigrames = matrix(frequence_bigrames, nrow = length(alphabets), byrow = TRUE, dimnames = list(alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_bigrames))[2]*1e-3
matrice_bigrames[matrice_bigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_bigrames) ) {
matrice_bigrames[numero_ligne,] = matrice_bigrames[numero_ligne,] / sum(matrice_bigrames[numero_ligne,])
}
return(matrice_bigrames)
}
calcule_frequence_trigrames <- function(texte, alphabets) {
frequence_trigrames = c()
for (compteur_anteprecendent in 1: length(alphabets) ) {
lettre_anteprecedente = alphabets[compteur_anteprecendent]
occurences_lettre_anteprecedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_anteprecedente),'..'))[[1]]
for (compteur_precedent in 1: length(alphabets) ) {
lettre_precedente = alphabets[compteur_precedent]
occurences_lettre_precedente = str_extract_all(occurences_lettre_anteprecedente,str_c(traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'))[[1]]
for (compteur_suivant in 1:length(alphabets)) {
lettre_suivante = alphabets[compteur_suivant]
trigrame = str_c(lettre_anteprecedente,lettre_precedente, lettre_suivante)
cardinal_trigrame = sum(occurences_lettre_precedente == trigrame)
frequence_trigrame = cardinal_trigrame/length(occurences_lettre_precedente)
frequence_trigrames = c(frequence_trigrames, frequence_trigrame)
}
}
}
matrice_trigrames = array(frequence_trigrames, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_trigrames))[2]*1e-3
matrice_trigrames[matrice_trigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_trigrames) ) {
for (numero_colonne in 1:ncol(matrice_trigrames) ) {
matrice_trigrames[numero_ligne,numero_colonne,] = matrice_trigrames[numero_ligne,numero_colonne,] / sum(matrice_trigrames[numero_ligne,numero_colonne,])
}
}
return(matrice_trigrames)
}
calcule_frequence_trigrames(texte_apprentissage,alphabets)
occurences_lettre_anteprecedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(alphabets[3]),'..'))[[1]]
alphabets
occurences_lettre_anteprecedente
occurences_lettre_anteprecedente = str_extract_all(texte_apprentissage,str_c(traitement_regex_de_caracteres_speciaux(alphabets[3]),'..'))[[1]]
occurences_lettre_anteprecedente
occurences_lettre_precedente = str_extract_all(occurences_lettre_anteprecedente,str_c(traitement_regex_de_caracteres_speciaux(alphabets[3]),'.'))[[1]]
occurences_lettre_precedente
str_c("a","b","c")
occurences_lettre_precedente = str_extract_all(occurences_lettre_anteprecedente,str_c('.',traitement_regex_de_caracteres_speciaux(alphabets[3]),'.'))[[1]]
occurences_lettre_precedente
occurences_lettre_anteprecedente
occurences_lettre_precedente = str_extract_all(occurences_lettre_anteprecedente,str_c('.',traitement_regex_de_caracteres_speciaux(alphabets[3]),'.'))[[1]]
occurences_lettre_precedente
identical("str","str")
identical(".tr","str")
occurences_lettre_precedente = occurences_lettre_anteprecedente[grepl(str_c('.',traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'), occurences_lettre_anteprecedente, perl = TRUE)]
occurences_lettre_precedente
occurences_lettre_anteprecedente
occurences_lettre_precedente = occurences_lettre_anteprecedente[grepl(str_c('.',traitement_regex_de_caracteres_speciaux("a"),'.'), occurences_lettre_anteprecedente, perl = TRUE)]
occurences_lettre_precedente
sum(occurences_lettre_precedente == "iam")
length(occurences_lettre_precedente)
calcule_frequence_trigrames <- function(texte, alphabets) {
frequence_trigrames = c()
for (compteur_anteprecendent in 1: length(alphabets) ) {
lettre_anteprecedente = alphabets[compteur_anteprecendent]
occurences_lettre_anteprecedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_anteprecedente),'..'))[[1]]
for (compteur_precedent in 1: length(alphabets) ) {
lettre_precedente = alphabets[compteur_precedent]
occurences_lettre_precedente = occurences_lettre_anteprecedente[grepl(str_c('.',traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'), occurences_lettre_anteprecedente, perl = TRUE)]
for (compteur_suivant in 1:length(alphabets)) {
lettre_suivante = alphabets[compteur_suivant]
trigrame = str_c(lettre_anteprecedente,lettre_precedente, lettre_suivante)
cardinal_trigrame = sum(occurences_lettre_precedente == trigrame)
frequence_trigrame = cardinal_trigrame/length(occurences_lettre_precedente)
frequence_trigrames = c(frequence_trigrames, frequence_trigrame)
}
}
}
matrice_trigrames = array(frequence_trigrames, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_trigrames))[2]*1e-3
matrice_trigrames[matrice_trigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_trigrames) ) {
for (numero_colonne in 1:ncol(matrice_trigrames) ) {
matrice_trigrames[numero_ligne,numero_colonne,] = matrice_trigrames[numero_ligne,numero_colonne,] / sum(matrice_trigrames[numero_ligne,numero_colonne,])
}
}
return(matrice_trigrames)
}
mmmm = calcule_frequence_trigrames(texte_apprentissage, alphabets)
mmmm
mmmm[1,1,1]
calcule_frequence_trigrames <- function(texte, alphabets) {
frequence_trigrames = c()
for (compteur_anteprecendent in 1: length(alphabets) ) {
lettre_anteprecedente = alphabets[compteur_anteprecendent]
occurences_lettre_anteprecedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_anteprecedente),'..'))[[1]]
for (compteur_precedent in 1: length(alphabets) ) {
lettre_precedente = alphabets[compteur_precedent]
occurences_lettre_precedente = occurences_lettre_anteprecedente[grepl(str_c('.',traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'), occurences_lettre_anteprecedente, perl = TRUE)]
for (compteur_suivant in 1:length(alphabets)) {
lettre_suivante = alphabets[compteur_suivant]
trigrame = str_c(lettre_anteprecedente,lettre_precedente, lettre_suivante)
cardinal_trigrame = sum(occurences_lettre_precedente == trigrame)
frequence_trigrame = cardinal_trigrame/length(occurences_lettre_precedente)
print(frequence_trigrame)
frequence_trigrames = c(frequence_trigrames, frequence_trigrame)
}
}
}
matrice_trigrames = array(frequence_trigrames, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_trigrames))[2]*1e-3
matrice_trigrames[matrice_trigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_trigrames) ) {
for (numero_colonne in 1:ncol(matrice_trigrames) ) {
matrice_trigrames[numero_ligne,numero_colonne,] = matrice_trigrames[numero_ligne,numero_colonne,] / sum(matrice_trigrames[numero_ligne,numero_colonne,])
}
}
return(matrice_trigrames)
}
mmmm = calcule_frequence_trigrames(texte_apprentissage, alphabets)
occurences_lettre_anteprecedente[grepl(str_c('.',"a",'.'), occurences_lettre_anteprecedente, perl = TRUE)]
occurences_lettre_anteprecedente[grepl(str_c('.',"(",'.'), occurences_lettre_anteprecedente, perl = TRUE)]
occurences_lettre_anteprecedente[grepl(str_c('.',"//(",'.'), occurences_lettre_anteprecedente, perl = TRUE)]
occurences_lettre_anteprecedente[grepl(str_c('.',"\\(",'.'), occurences_lettre_anteprecedente, perl = TRUE)]
aa = occurences_lettre_anteprecedente[grepl(str_c('.',"\\(",'.'), occurences_lettre_anteprecedente, perl = TRUE)]
aa
sum(aa = "thy")
as.numeric(aa)
sum(aa == "thy")
sum(aa == "thy")/1
a
z
2
length(aa)
0/0
0 == TRUE
0 != TRUE
calcule_frequence_trigrames <- function(texte, alphabets) {
frequence_trigrames = c()
for (compteur_anteprecendent in 1: length(alphabets) ) {
lettre_anteprecedente = alphabets[compteur_anteprecendent]
occurences_lettre_anteprecedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_anteprecedente),'..'))[[1]]
for (compteur_precedent in 1: length(alphabets) ) {
lettre_precedente = alphabets[compteur_precedent]
occurences_lettre_precedente = occurences_lettre_anteprecedente[grepl(str_c('.',traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'), occurences_lettre_anteprecedente, perl = TRUE)]
for (compteur_suivant in 1:length(alphabets)) {
lettre_suivante = alphabets[compteur_suivant]
trigrame = str_c(lettre_anteprecedente,lettre_precedente, lettre_suivante)
cardinal_trigrame = sum(occurences_lettre_precedente == trigrame)
if (cardinal_trigrame != 0) {
frequence_trigrame = cardinal_trigrame/length(occurences_lettre_precedente)
} else {
frequence_trigrame = 0
}
print(frequence_trigrame)
frequence_trigrames = c(frequence_trigrames, frequence_trigrame)
}
}
}
matrice_trigrames = array(frequence_trigrames, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_trigrames))[2]*1e-3
matrice_trigrames[matrice_trigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_trigrames) ) {
for (numero_colonne in 1:ncol(matrice_trigrames) ) {
matrice_trigrames[numero_ligne,numero_colonne,] = matrice_trigrames[numero_ligne,numero_colonne,] / sum(matrice_trigrames[numero_ligne,numero_colonne,])
}
}
return(matrice_trigrames)
}
calcule_frequence_trigrames(texte_apprentissage, alphabets)
calcule_frequence_bigrames <- function(texte, alphabets) {
frequence_bigrames = c()
for (i in 1: length(alphabets) ) {
lettre_precedente = alphabets[i]
occurences_lettre_precedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'))[[1]]
for (j in 1: length(alphabets) ) {
lettre_suivante = alphabets[j]
bigrame = str_c(lettre_precedente,lettre_suivante)
cardinal_bigrame = sum(occurences_lettre_precedente == bigrame)
frequence_bigrame = cardinal_bigrame/length(occurences_lettre_precedente)
frequence_bigrames = c(frequence_bigrames, frequence_bigrame)
}
}
matrice_bigrames = matrix(frequence_bigrames, nrow = length(alphabets), byrow = TRUE, dimnames = list(alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_bigrames))[2]*1e-3
matrice_bigrames[matrice_bigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_bigrames) ) {
matrice_bigrames[numero_ligne,] = matrice_bigrames[numero_ligne,] / sum(matrice_bigrames[numero_ligne,])
}
return(matrice_bigrames)
}
calcule_frequence_trigrames <- function(texte, alphabets) {
frequence_trigrames = c()
for (compteur_anteprecendent in 1: length(alphabets) ) {
lettre_anteprecedente = alphabets[compteur_anteprecendent]
occurences_lettre_anteprecedente = str_extract_all(texte,str_c(traitement_regex_de_caracteres_speciaux(lettre_anteprecedente),'..'))[[1]]
for (compteur_precedent in 1: length(alphabets) ) {
lettre_precedente = alphabets[compteur_precedent]
occurences_lettre_precedente = occurences_lettre_anteprecedente[grepl(str_c('.',traitement_regex_de_caracteres_speciaux(lettre_precedente),'.'), occurences_lettre_anteprecedente, perl = TRUE)]
for (compteur_suivant in 1:length(alphabets)) {
lettre_suivante = alphabets[compteur_suivant]
trigrame = str_c(lettre_anteprecedente,lettre_precedente, lettre_suivante)
cardinal_trigrame = sum(occurences_lettre_precedente == trigrame)
if (cardinal_trigrame != 0) {
frequence_trigrame = cardinal_trigrame/length(occurences_lettre_precedente)
} else {
frequence_trigrame = 0
}
frequence_trigrames = c(frequence_trigrames, frequence_trigrame)
}
}
}
matrice_trigrames = array(frequence_trigrames, dim = c(length(alphabets) , length(alphabets), length(alphabets)) , dimnames = list(alphabets, alphabets, alphabets) )
valeur_minimal = unique(sort(matrice_trigrames))[2]*1e-3
matrice_trigrames[matrice_trigrames == 0] <- valeur_minimal
for (numero_ligne in 1:nrow(matrice_trigrames) ) {
for (numero_colonne in 1:ncol(matrice_trigrames) ) {
matrice_trigrames[numero_ligne,numero_colonne,] = matrice_trigrames[numero_ligne,numero_colonne,] / sum(matrice_trigrames[numero_ligne,numero_colonne,])
}
}
return(matrice_trigrames)
}
mmmm = calcule_frequence_trigrames(texte_apprentissage, alphabets)
mmmm[1,1,1]
mmmm[,1,1]
sum(mmmm[,1,1])
sum(mmmm[1,1,])
sum(mmmm[3,25,])
sum(mmmm[43,43,])
sum(mmmm[43,49,])
sum(mmmm[43,47,])
sum(mmmm[43,46,])
sum(mmmm[43,45,])
sum(mmmm[44,45,])
sum(mmmm[45,45,])
is.matrix(matrice_apprentissage)
is.matrix(mmmm)
is.array(mmmm)
is.array(matrice_apprentissage)
!is.matrix(mmmm)
is.matrix(mmmm)
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_trigrame)
}
}
}
return(qualite)
}
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_trigrame)
}
}
}
return(qualite)
}
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_trigrame)
}
}
}
return(qualite)
}
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1), str_sub(texte, compteur+2, compteur+2) ]
qualite = qualite + log(probabilite_trigrame)
}
}
}
return(qualite)
}
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1), str_sub(texte, compteur+2, compteur+2) ]
qualite = qualite + log(probabilite_trigrame)
}
}
}
return(qualite)
}
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1), str_sub(texte, compteur+2, compteur+2) ]
qualite = qualite + log(probabilite_trigrame)
}
}
}
return(qualite)
}
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
}
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1), str_sub(texte, compteur+2, compteur+2) ]
qualite = qualite + log(probabilite_trigrame)
}
}
return(qualite)
}
calcul_qualite("ghjghjghjk",matrice_apprentissage)
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(!is.array(matrice_de_selection)) {
print("OK")
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
}
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1), str_sub(texte, compteur+2, compteur+2) ]
qualite = qualite + log(probabilite_trigrame)
}
}
return(qualite)
}
calcul_qualite("ghjghjghjk",matrice_apprentissage)
is.array(matrice_apprentissage)
is.matrix(matrice_apprentissage)
is.matrix(mmmm)
calcul_qualite = function(texte,matrice_de_selection) {
qualite = 0
if(is.matrix(matrice_de_selection)) {
for(compteur in 1:(str_length(texte)-1) ) {
probabilite_bigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1) ]
qualite = qualite + log(probabilite_bigrame)
}
} else {
for(compteur in 1:(str_length(texte)-2) ) {
probabilite_trigrame = matrice_de_selection[ str_sub(texte,compteur,compteur) , str_sub(texte, compteur+1, compteur+1), str_sub(texte, compteur+2, compteur+2) ]
qualite = qualite + log(probabilite_trigrame)
}
}
return(qualite)
}
calcul_qualite("ghjghjghjk",matrice_apprentissage)
calcul_qualite("ghjghjghjk",mmmm)
